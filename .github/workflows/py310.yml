name: push

on:
  workflow_call:

env:
  PYTHON_IMAGE: 3.10
  PYTHON_PACKAGE_NAME: deker_local_adapters

jobs:
  setup:
    timeout-minutes: 60
    runs-on: ubuntu-latest
    steps:
      - name: Create python environment
        uses: ./.github/workflows/reusable/create_environment.yml
        with:
          python-version: ${{ env.PYTHON_IMAGE }}

  linters:
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: ${{ env.PYTHON_IMAGE }}

      - name: Load virtual environment
        uses: actions/cache@v2
        with:
          path: .venv
          key: ${{ runner.os }}-venv-${{ env.PYTHON_IMAGE }}-${{ hashFiles('pyproject.toml', 'poetry.lock') }}

      - name: Run linters and checks
        run: |
          source .venv/bin/activate
          isort ./${{ env.PYTHON_PACKAGE_NAME }}
          black ./${{ env.PYTHON_PACKAGE_NAME }}
          flake8 ./${{ env.PYTHON_PACKAGE_NAME }}
          mypy ./${{ env.PYTHON_PACKAGE_NAME }} --install-types --non-interactive --config-file pyproject.toml
          doc8 --config pyproject.toml ./docs
        env:
          PIP_DISABLE_PIP_VERSION_CHECK: 1

      - name: Save linter reports
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: linter-reports
          path: report.xml

  tests:
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: ${{ env.PYTHON_IMAGE }}

      - name: Load virtual environment
        uses: actions/cache@v2
        with:
          path: .venv
          key: ${{ runner.os }}-venv-${{ env.PYTHON_IMAGE }}-${{ hashFiles('pyproject.toml', 'poetry.lock') }}

      - name: Run shuffled tests
        run: |
          source .venv/bin/activate
          pytest --random-order --junitxml=tests.xml
        env:
          PIP_DISABLE_PIP_VERSION_CHECK: 1

      - name: Save test reports
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: test-reports
          path: tests.xml

  coverage:
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: ${{ env.PYTHON_IMAGE }}

      - name: Load virtual environment
        uses: actions/cache@v2
        with:
          path: .venv
          key: ${{ runner.os }}-venv-${{ env.PYTHON_IMAGE }}-${{ hashFiles('pyproject.toml', 'poetry.lock') }}

      - name: Run coverage
        run: |
          source .venv/bin/activate
          coverage run -m pytest --junitxml=report.xml
          coverage report --fail-under=92
          coverage xml
        env:
          PIP_DISABLE_PIP_VERSION_CHECK: 1

      - name: Save coverage reports
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: coverage-reports
          path: coverage.xml
